(* ************************************************************** *)
(*                                                                *)
(*                      ChPT3                                     *)
(*                                                                *)
(* ************************************************************** *)

(*
Author:              F.Orellana

Year:                1999

Mathematica Version: 3.0

Requirements:        FeynCalc > 3, PHI

Summary:             Configuration file for the family of
						Lagrangians ChPT3 for PHI

Description:         Definitions for standard ChPT lagrangians.

						The definitions follow
						J.F. Donoghue, E. Golowich
						and B.R. Holstein (1992), "Dynamics of
						the Standard Model", Cambridge
*)

(* ************************************************************** *)

(* Modified box definitions for FeynCalc *)

<<"FCBoxes.m"

(* ************************************************************** *)

(* SU(3) meson matrix PhiMeson instead of Pion *)

BeginPackage["Phi`Objects`", {"Phi`",
"FeynCalc`"}];
Begin["`Private`"];

MM[x_?(! NumberQ[#] &), h___, opts___Rule] /; (fcexpt/.Flatten[{opts}]/.Options[MM]) :=

	UFieldMatrix[fcqf[(Particle[PhiMeson, h])][x], ##] & @@
	Union[OptionsSelect[UFieldMatrix, opts], OptionsSelect[UMatrix, opts]];
MM[ii_?NumberQ, x_, h___, opts___Rule] /; (fcexpt/.Flatten[{opts}]/.Options[MM]) :=
	UFieldMatrix[ii, fcqf[(Particle[PhiMeson, h])][x], ##] & @@
	Union[OptionsSelect[UFieldMatrix, opts], OptionsSelect[UMatrix, opts]];
SMM[x_, h___, opts___Rule] /; (fcexpt/.Flatten[{opts}]/.Options[SMM]) := MM[1/2, x, h, opts];
MMS[x_, h___, opts___Rule] /; (fcexpt/.Flatten[{opts}]/.Options[MMS]) :=
	UFieldMatrixSeries[fcqf[(Particle[PhiMeson, h])][x], ##] & @@
	Union[OptionsSelect[UFieldMatrix, opts], OptionsSelect[UMatrix, opts]];

End[];
EndPackage[];

(* ************************************************************** *)

(* Usage definitions *)

Phi`Objects`ChPT3::usage=
"Lagrangian[ChPT3[2]] is the mesonic Chiral Perturbation Theory \
lagrangian written in terms of a matrix representation \
of the meson fields to second order in the energy.  \
Lagrangian[ChPT3[4]] is the mesonic Chiral Perturbation Theory lagrangian \
to four'th order in the energy (first written down by Gasser and \
Leutwyler).  To evaluate use ArgumentsSupply.";

MM::usage="MM[x] :=
UFieldMatrix[QuantumField[Particle[PhiMeson]][x]].
MM takes two optional arguments with head RenormalizationState
and RenormalizationScheme respectively.";

Phi`Objects`CovariantNabla::usage=
"CovariantNabla[f[x],x,{li1,li2,...},opts] is \
the covariant derivative of a h h^(-1)  transforming quantity  f[x] with respect to \
space-time variables x and with Lorentz indices li0, li1, li2,...  \
(See e.g ChPT (Ecker, Kambor and Wyler (1992), CERN-TH.6610/92) \
- and note that a gamma is used that follows  Holstein, Golowich and \
Donoghue's LR convention instead of the inverse Bernese convention).  \
To evaluate use ArgumentsSupply.";

(* ************************************************************** *)

(* Source fields *)

(* Strip off options passed to Particle[PseudoScalar[0],___]*)

Particle[PseudoScalar[0],o___,__Rule]:=Particle[PseudoScalar[0],o];

(* The scalar source is set to the quark mass matrix *)

QuantumField[Particle[Scalar[0],st___RenormalizationState,
sc___RenormalizationScheme,qs___ExpansionState,
opts___Rule|opts___List],SUNIndex[0]][x_]:=
UQuarkMassMatrix[st,sc,qs,opts];

(* ************************************************************** *)

(* Redefinition of the left and right components
Ecker, Kambor and Wyler have them the other way round.
Also its necessary in order to not have the AxialVector (Vector)
part set to zero *)

IsoVector[QuantumField[aa___, Particle[LeftComponent[a_,opts0___Rule],i___],
bb___],opts___][x_]/;(Explicit/.{opts0}/.Options[LeftComponent]):=
1/2*(
IsoVector[QuantumField[aa, Particle[Vector[a],i],bb],opts][x]-
IsoVector[QuantumField[aa, Particle[AxialVector[a],i],bb],opts][x]);

IsoVector[QuantumField[aa___, Particle[RightComponent[a_,opts0___Rule],i___],bb___],
opts___][x_]/;(Explicit/.{opts0}/.Options[RightComponent]):=1/2*(
IsoVector[QuantumField[aa, Particle[Vector[a],i],bb],opts][x]+
IsoVector[QuantumField[aa, Particle[AxialVector[a],i],bb],opts][x]);

QuantumField[aa___, Particle[LeftComponent[a_,opts0___Rule],i___],bb___][x_]/;
(Explicit/.{opts0} /. Options[LeftComponent]):=
1/2*(QuantumField[aa, Particle[Vector[a],i],bb][x]-
		QuantumField[aa, Particle[AxialVector[a],i],bb][x]);

QuantumField[aa___, Particle[RightComponent[a_,opts0___Rule],i___],bb___][x_]/;
(Explicit/.{opts0} /. Options[RightComponent]):=
1/2*(QuantumField[aa, Particle[Vector[a],i],bb][x]+
		QuantumField[aa, Particle[AxialVector[a],i],bb][x]);

(* ************************************************************** *)

(* Adjoints and conjugates *)

Adjoint[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2|12],___],___][_]] = p;

Adjoint[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2|12],___],___]] = p;

Unprotect[Conjugate];

Conjugate[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2|12],___],___][_]] = p;

Conjugate[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2|12],___],___]] = p;

Protect[Conjugate];

(* ************************************************************** *)

(* Antiparticles *)

ChargeConjugate[Pion] = Pion;
ChargeConjugate[Vector[0]] = Vector[0];
ChargeConjugate[AxialVector[0]] = AxialVector[0];
ChargeConjugate[Scalar[0]] = Scalar[0];
ChargeConjugate[Scalar[1]] = Scalar[1];
ChargeConjugate[PseudoScalar[0]] = PseudoScalar[0];
ChargeConjugate[PseudoScalar[1]] = PseudoScalar[1];
ChargeConjugate[PionPlus] = PionMinus;
ChargeConjugate[PionMinus] = PionPlus;
ChargeConjugate[PionZero] = PionZero;
ChargeConjugate[KaonMinus] = KaonPlus;
ChargeConjugate[KaonPlus] = KaonMinus;
ChargeConjugate[KaonZero] = KaonZeroBar;
ChargeConjugate[KaonZeroBar] = KaonZero;
ChargeConjugate[EtaMeson] = EtaMeson;

(* ************************************************************** *)

(* Constants *)

(* When calculating infrared divergences, the photon mass
should not be set to zero *)

ParticleMass[Photon,___]:=0;
ParticleMass[Photon[0],___]:=0;

(*CouplingConstant[ChPT3[4],1,___]=0;
CouplingConstant[ChPT3[4],2,___]=0;
CouplingConstant[ChPT3[4],3,___]=0;
CouplingConstant[ChPT3[4],4,___]=0;
CouplingConstant[ChPT3[4],5,___]=0;
CouplingConstant[ChPT3[4],6,___]=0;
CouplingConstant[ChPT3[4],7,___]=0;
CouplingConstant[ChPT3[4],8,___]=0;
CouplingConstant[ChPT3[4],9,___]=0;
CouplingConstant[ChPT3[4],10,___]=0;
CouplingConstant[ChPT3[4],11,___]=0;
CouplingConstant[ChPT3[4],12,___]=0;*)


(* ************************************************************** *)

(* The nabla of the u_mu field *)

Options[CovariantNabla] = {Explicit -> True};

CovariantNabla[aa_,x_,loris__LorentzIndex,lori1_LorentzIndex, opts___Rule]:=
(newfuncc[1]=CovariantNabla[aa,x,lori1, opts];
Do[newfuncc[rep+1]=CovariantNabla[
newfuncc[rep],x,##,opts]&@@Take[{loris},{-rep}],
{rep,1,Length[{loris}]}];newfuncc[Length[{loris}]+1]);

CovariantNabla[aa_,x_,{loris__},rest___] :=
CovariantNabla[aa,x,##,rest]&@@
LorentzIndex/@{loris};

(* -------------------------------------------------------------- *)

CovariantNabla[aa_,{lori_},(opts___Rule|opts___List)] /;
(Explicit /. Flatten[{opts}] /. Options[CovariantNabla]) :=

FieldDerivative[aa,{lori}] +

NM[UGamma[lori],aa] -
NM[aa,UGamma[lori]];

CovariantNabla[aa_,x_,
lori_LorentzIndex,
ar___RenormalizationState,br___RenormalizationScheme,
cr___ExpansionState,(opts___Rule|opts___List)] /;
(Explicit /. Flatten[{opts}] /. Options[CovariantNabla]) :=

FieldDerivative[aa,x,lori] +

NM[UGamma[lori,ar,br,cr,opts][x],aa] -
NM[aa,UGamma[lori,ar,br,cr,opts][x]];


(* ************************************************************** *)

(* The covariant derivative *)

CovariantFieldDerivative[aa_,x_,{loris__},rest___] :=
CovariantFieldDerivative[aa,x,##,rest]&@@
LorentzIndex/@{loris};

(* -------------------------------------------------------------- *)

(* Standard ChPT - Donoghue, Golowich, Holstein *)

CovariantFieldDerivative[aa_,x_,
lori_LorentzIndex,
ar___RenormalizationState,br___RenormalizationScheme,
cr___ExpansionState,(opts___Rule|opts___List)] /;
(Explicit /. Flatten[{opts}] /. Options[CovariantFieldDerivative]) :=

FieldDerivative[aa,x,lori] +

I*NM[UGeneratorMatrixIsoDot[QuantumField[Particle[
LeftComponent[0],ar,br],lori][x],opts],aa] -

I*NM[aa,UGeneratorMatrixIsoDot[QuantumField[Particle[
RightComponent[0],ar,br],lori][x],opts]];

(* ************************************************************** *)

(* Re-setting of options and $-variables *)

SetOptions[Renormalize,SUNN->3];
SetOptions[WriteOutUMatrices,SUNN->3];
SetOptions[WriteOutIsoVectors,SUNN->3];
SetOptions[UQuarkMass,SUNN->3,DiagonalToU->True];
SetOptions[UMatrix,SUNN->3];
SetOptions[IsoVector,SUNN->3];
SetOptions[UGenerator,SUNN->3];
SetOptions[UTrace,SUNN->3];
SetOptions[SUNReduce,SUNN->3];
SetOptions[ExpandU,SUNN->3];
SetOptions[FAToFC,EqualMasses->False];
SetOptions[DiscardTerms,
Retain->{Particle[PhiMeson,RenormalizationState[0]]->4}];
SetOptions[CovariantFieldDerivative,SUNN->3];
SetOptions[UPerturb, SUNN -> 3];
SetOptions[UReduce, SUNN -> 3, UDimension -> 3];
SetOptions[SMMToMM, SUNN -> 3];
SetOptions[CharacteristicCoefficient, UDimension -> 3];
SetOptions[CayleyHamilton, UDimension -> 3];
SetOptions[CayleyHamiltonRules, SUNN -> 3, UDimension -> 3];
tmpoptscdr=Options[CovariantFieldDerivative];
tmpoptsmm=Options[MM];
SetOptions[CovariantFieldDerivative, Explicit -> False];
SetOptions[MM, Explicit -> False];
SetOptions[CayleyHamiltonTrick, SUNN -> 3, UDimension -> 3,
	UMatrices :> {{I NM[
			Adjoint[CovariantFieldDerivative[MM[Global`x_], Global`x_, {Global`\[Rho]1_}]],
			MM[Global`x_]],
		I NM[Adjoint[MM[Global`x_]],
			CovariantFieldDerivative[MM[Global`x_], Global`x_, {Global`\[Rho]2_}]],
		I NM[Adjoint[CovariantFieldDerivative[MM[Global`x_], Global`x_, {Global`\[Rho]1_}]],
			MM[Global`x_]],
		I NM[Adjoint[MM[Global`x_]],
			CovariantFieldDerivative[MM[Global`x_], Global`x_, {Global`\[Rho]2_}]]}}];
SetOptions[CovariantFieldDerivative, Sequence@@tmpoptscdr];
SetOptions[MM, Sequence@@tmpoptsmm];

$EOMRules = {UTrace1[
		NM[Adjoint[MM[x_]],
		CovariantFieldDerivative[MM[x_], x_, LorentzIndex[mu_]],
		Adjoint[UMatrix[UChi[]][x_]],
		CovariantFieldDerivative[MM[x_], x,
			LorentzIndex[mu_]]]] -> -(UTrace1[
				NM[Adjoint[MM[x]], UMatrix[UChi[]][x]]]^2/
			6 - (UTrace1[NM[Adjoint[MM[x]], UMatrix[UChi[]][x]]]*
				UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], MM[x]]])/3 +
			UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], MM[x]]]^2/6 +
			UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], UMatrix[UChi[]][x]]] -
			UTrace1[NM[Adjoint[MM[x]], UMatrix[UChi[]][x], Adjoint[MM[x]],
				UMatrix[UChi[]][x]]]/2 -
			UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], MM[x],
				Adjoint[UMatrix[UChi[]][x]], MM[x]]]/
			2 - (-UTrace1[
					NM[Adjoint[
						CovariantFieldDerivative[MM[x], x,
						LorentzIndex[mu]]],
					CovariantFieldDerivative[UMatrix[UChi[]][x], x,
						LorentzIndex[mu]]]] -
				UTrace1[
				NM[Adjoint[
					CovariantFieldDerivative[UMatrix[UChi[]][x], x,
						LorentzIndex[mu]]],
					CovariantFieldDerivative[MM[x], x,
					LorentzIndex[mu]]]] -
				UTrace1[
				NM[MM[x],
					Adjoint[
					CovariantFieldDerivative[MM[x], x,
						LorentzIndex[mu]]], UMatrix[UChi[]][x],
					Adjoint[
					CovariantFieldDerivative[MM[x], x,
						LorentzIndex[mu]]]]])),
	UTrace1[NM[
		Adjoint[CovariantFieldDerivative[MM[x_], x_, LorentzIndex[mu_]]],
		MM[x_], Adjoint[UMatrix[UChi[]][x_]],
		CovariantFieldDerivative[MM[x_], x,
			LorentzIndex[mu_]]]] -> (UTrace1[
				NM[Adjoint[MM[x]], UMatrix[UChi[]][x]]]^2/
			6 - (UTrace1[NM[Adjoint[MM[x]], UMatrix[UChi[]][x]]]*
				UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], MM[x]]])/3 +
		UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], MM[x]]]^2/6 +
		UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], UMatrix[UChi[]][x]]] -
		UTrace1[NM[Adjoint[MM[x]], UMatrix[UChi[]][x], Adjoint[MM[x]],
				UMatrix[UChi[]][x]]]/2 -
		UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], MM[x],
				Adjoint[UMatrix[UChi[]][x]], MM[x]]]/
			2 - (-UTrace1[
				NM[Adjoint[
					CovariantFieldDerivative[MM[x], x,
						LorentzIndex[mu]]],
					CovariantFieldDerivative[UMatrix[UChi[]][x], x,
					LorentzIndex[mu]]]] -
			UTrace1[NM[
				Adjoint[
					CovariantFieldDerivative[UMatrix[UChi[]][x], x,
					LorentzIndex[mu]]],
				CovariantFieldDerivative[MM[x], x, LorentzIndex[mu]]]] -
			UTrace1[NM[MM[x],
				Adjoint[
					CovariantFieldDerivative[MM[x], x, LorentzIndex[mu]]],
				UMatrix[UChi[]][x],
				Adjoint[
					CovariantFieldDerivative[MM[x], x,
					LorentzIndex[mu]]]]]))};

$ParticlesInUse=
{PhiMeson,Pion,Kaon,KaonPlus,KaonMinus,
KaonZero,KaonZeroBar,EtaMeson,
Photon,Vector[0],AxialVector[0],
PseudoScalar[0],Scalar[0],Scalar[2]};

$ExpansionQuantities=
{FourVector[__],ParticleMass[Pion,a___],
ParticleMass[PhiMeson,b___],ParticleMass[KaonZero,c___],
ParticleMass[KaonPlus,d___],ParticleMass[EtaMeson,d___],
CouplingConstant[QED[2],e___]};

$PropagatorMassesStates={
	PhiMeson[0]->{RenormalizationState[0]},
	Pion[0]->{RenormalizationState[0]},
	Kaon[0]->{RenormalizationState[0]},
	KaonPlus[0]->{RenormalizationState[0]},
	KaonMinus[0]->{RenormalizationState[0]},
	KaonZero[0]->{RenormalizationState[0]},
	KaonZeroBar[0]->{RenormalizationState[0]},
	EtaMeson[0]->{RenormalizationState[0]},
	AxialVector[0][0]->{RenormalizationState[0]},
	PseudoScalar[0][0]->{RenormalizationState[0]},
	Vector[0]->{RenormalizationState[0]},
	Photon[0]->{RenormalizationState[0]}};

$CouplingIsoIndicesSpecifications =
{PhiMeson[0]->{{IsoRange->{0,1,2,3,4,5,6,7,8},IsoIndicesString->"I"}},
	PseudoScalar[0][0]->{{IsoRange->{0,1,2,3,4,5,6,7,8},IsoIndicesString->"I"}},
	Scalar[1][0]->{{IsoRange->{0,1,2,3,4,5,6,7,8},IsoIndicesString->"I"}},
	Scalar[2][0]->{{IsoRange->{0,1,2,3,4,5,6,7,8},IsoIndicesString->"I"}},
	PseudoScalar[0][0]->{{IsoRange->{0,1,2,3,4,5,6,7,8},IsoIndicesString->"I"}},
	AxialVector[0][0]->{{IsoRange->{0,1,2,3,4,5,6,7,8},IsoIndicesString->"I"}},
	Vector[0][0]->{{IsoRange->{0,1,2,3,4,5,6,7,8},IsoIndicesString->"I"}}};

$MixingFields=
{};

$InsertOnly=
{Scalar[1][0]->{
FeynArts`Incoming,
FeynArts`Outgoing,
FeynArts`External},
Scalar[2][0]->{
FeynArts`Incoming,
FeynArts`Outgoing,
FeynArts`External},
Vector[0][0]->{
FeynArts`Incoming,
FeynArts`Outgoing,
FeynArts`External},
PseudoScalar[0][0]->{
FeynArts`Incoming,
FeynArts`Outgoing,
FeynArts`External},
AxialVector[0][0]->{
FeynArts`Incoming,
FeynArts`Outgoing,
FeynArts`External}(*,
Photon[0]->{
FeynArts`Incoming,
FeynArts`Outgoing,
FeynArts`External}*)};

(* ************************************************************** *)
