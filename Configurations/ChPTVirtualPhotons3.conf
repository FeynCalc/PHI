(* ************************************************************** *)
(*                                                                *)
(*                      ChPTVirtualPhotons3                       *)
(*                                                                *)
(* ************************************************************** *)

(*
Author:              F.Orellana

Year:                2002

Mathematica Version: 4.0

Requirements:        FeynCalc > 3, PHI

Summary:             Configuration file for the family of
						lagrangians ChPTVirtualPhotons3 for PHI

Description:         Definitions for standard ChPT lagrangians
						with virtual photons.

						The definitions follow
						Res Urech
						(1994), hep-ph/9405341
*)

(* ************************************************************** *)

(* Modified box definitions for FeynCalc *)

<<"FCBoxes.m"

(* ************************************************************** *)

(* Usage definitions *)

Phi`Objects`ChPTVirtualPhotons3::usage=
"Lagrangian[ChPTVirtualPhotons3[2] is the mesonic Chiral  \
Perturbation Theory lagrangian with couplings to virtual photons \
written in terms of a matrix representation of the meson fields to second \
order in the energy and the electron charge.  Lagrangian[ChPTVirtualPhotons24]] \
is the lagrangian to four'th order in the energy and the electron charge.";

Phi`Objects`GRight::usage=
"GRight[mu] is the right-handed G field of \
(Res Urech (1994), hep-ph/9405341). \
With two arguments it's the field strength tensor.";

Phi`Objects`GLeft::usage=
"GLeft[mu] is the left-handed G field of \
(Res Urech (1994), hep-ph/9405341). \
With two arguments it's the field strength tensor.";

Phi`Objects`HRight::usage=
"HRight is the right-handed H field of \
(Res Urech (1994), hep-ph/9405341).";

Phi`Objects`HLeft::usage=
"HLeft is the left-handed H field of \
(Res Urech (1994), hep-ph/9405341).";

Phi`Objects`CQRight::usage=
"CQRight[mu] is the covariant derivative of the right-handed \
Q source of \
(Res Urech (1994), hep-ph/9405341). \
With two arguments it's the field strength tensor.";

Phi`Objects`CQLeft::usage=
"CQLeft[mu] is the covariant derivative of the Left-handed \
Q source of \
(Res Urech (1994), hep-ph/9405341). \
With two arguments it's the field strength tensor.";

Phi`Objects`CovariantNabla::usage=
"CovariantNabla[f[x],x,{li1,li2,...},opts] is
the covariant nabla of f[x] with respect to
space-time variables x and with Lorentz indices li0, li1, li2,...
as defined in Ecker, Kambor and Wyler (1992), CERN-TH.6610/92.
To evaluate use ArgumentsSupply.";

MM::usage="MM[x] :=
UFieldMatrix[QuantumField[Particle[PhiMeson]][x]].
MM takes two optional arguments with head RenormalizationState
and RenormalizationScheme respectively.";

(* ************************************************************** *)

(* Box definitions *)

GRight /: MakeBoxes[GRight[mu__,___Rule][_], TraditionalForm] :=
	SubsuperscriptBox[
	MakeBoxes[
		StyleForm["G", FontSlant -> "Italic",
		FontWeight -> "Bold"]][[1]],
	RowBox[MakeBoxes[TraditionalForm[#]]&/@{mu}],
	MakeBoxes[TraditionalForm["R"]]];

GRight /: MakeBoxes[GRight[mu__,___Rule], TraditionalForm] :=
	SubsuperscriptBox[
	MakeBoxes[
		StyleForm["G", FontSlant -> "Italic",
		FontWeight -> "Bold"]][[1]],
	RowBox[MakeBoxes[TraditionalForm[#]]&/@{mu}],
	MakeBoxes[TraditionalForm["R"]]];

GLeft /: MakeBoxes[GLeft[mu__,___Rule][_], TraditionalForm] :=
	SubsuperscriptBox[
	MakeBoxes[
		StyleForm["G", FontSlant -> "Italic",
		FontWeight -> "Bold"]][[1]],
	RowBox[MakeBoxes[TraditionalForm[#]]&/@{mu}],
	MakeBoxes[TraditionalForm["L"]]];

GLeft /: MakeBoxes[GLeft[mu__,___Rule], TraditionalForm] :=
	SubsuperscriptBox[
	MakeBoxes[
		StyleForm["G", FontSlant -> "Italic",
		FontWeight -> "Bold"]][[1]],
	RowBox[MakeBoxes[TraditionalForm[#]]&/@{mu}],
	MakeBoxes[TraditionalForm["L"]]];

HRight /: MakeBoxes[HRight[___], TraditionalForm] :=
	SubscriptBox[
	MakeBoxes[
		StyleForm["H", FontSlant -> "Italic",
		FontWeight -> "Bold"]][[1]],
	MakeBoxes[TraditionalForm["R"]]];

HRight /: MakeBoxes[HRight, TraditionalForm] :=
	SubscriptBox[
	MakeBoxes[
		StyleForm["H", FontSlant -> "Italic",
		FontWeight -> "Bold"]][[1]],
	MakeBoxes[TraditionalForm["R"]]];

HLeft /: MakeBoxes[HLeft[___], TraditionalForm] :=
	SubscriptBox[
	MakeBoxes[
		StyleForm["H", FontSlant -> "Italic",
		FontWeight -> "Bold"]][[1]],
	MakeBoxes[TraditionalForm["L"]]];

HLeft /: MakeBoxes[HLeft, TraditionalForm] :=
	SubscriptBox[
	MakeBoxes[
		StyleForm["H", FontSlant -> "Italic",
		FontWeight -> "Bold"]][[1]],
	MakeBoxes[TraditionalForm["L"]]];

CQRight /: MakeBoxes[CQRight[mu__,___Rule][_], TraditionalForm] :=
	RowBox[{SubsuperscriptBox[
	MakeBoxes[
		StyleForm["c", FontSlant -> "Italic",
		FontWeight -> "Bold"]][[1]],
	RowBox[MakeBoxes[TraditionalForm[#]]&/@{mu}],
	MakeBoxes[TraditionalForm["R"]]],
	SubscriptBox[
	MakeBoxes[
		StyleForm["Q", FontSlant -> "Italic",
		FontWeight -> "Bold"]][[1]],
	MakeBoxes[TraditionalForm["R"]]]}];

CQRight /: MakeBoxes[CQRight[mu__,___Rule], TraditionalForm] :=
	RowBox[{SubsuperscriptBox[
	MakeBoxes[
		StyleForm["c", FontSlant -> "Italic",
		FontWeight -> "Bold"]][[1]],
	RowBox[MakeBoxes[TraditionalForm[#]]&/@{mu}],
	MakeBoxes[TraditionalForm["R"]]],
	SubscriptBox[
	MakeBoxes[
		StyleForm["Q", FontSlant -> "Italic",
		FontWeight -> "Bold"]][[1]],
	MakeBoxes[TraditionalForm["R"]]]}];

CQLeft /: MakeBoxes[CQLeft[mu__,___Rule][_], TraditionalForm] :=
	RowBox[{SubsuperscriptBox[
	MakeBoxes[
		StyleForm["c", FontSlant -> "Italic",
		FontWeight -> "Bold"]][[1]],
	RowBox[MakeBoxes[TraditionalForm[#]]&/@{mu}],
	MakeBoxes[TraditionalForm["L"]]],
	SubscriptBox[
	MakeBoxes[
		StyleForm["Q", FontSlant -> "Italic",
		FontWeight -> "Bold"]][[1]],
	MakeBoxes[TraditionalForm["L"]]]}];

CQLeft /: MakeBoxes[CQLeft[mu__,___Rule], TraditionalForm] :=
	RowBox[{SubsuperscriptBox[
	MakeBoxes[
		StyleForm["c", FontSlant -> "Italic",
		FontWeight -> "Bold"]][[1]],
	RowBox[MakeBoxes[TraditionalForm[#]]&/@{mu}],
	MakeBoxes[TraditionalForm["L"]]],
	SubscriptBox[
	MakeBoxes[
		StyleForm["Q", FontSlant -> "Italic",
		FontWeight -> "Bold"]][[1]],
	MakeBoxes[TraditionalForm["L"]]]}];

(* ************************************************************** *)

(* Source fields *)

IsoVector[QuantumField[Particle[Scalar[0],___],___],___][_]:=0;
IsoVector[QuantumField[Particle[PseudoScalar[0],___],___],___][_]:=0;
IsoVector[QuantumField[Particle[Vector[0],___],___],___][_]:=0;
(*IsoVector[QuantumField[Particle[AxialVector[0],___],___],___][_]:=0;*)

(* The scalar source is set to the quark mass matrix *)

QuantumField[Particle[Scalar[0],st___RenormalizationState,
sc___RenormalizationScheme,qs___ExpansionState,
opts___Rule|opts___List],SUNIndex[0]][x_]:=
UQuarkMassMatrix[st,sc,qs,opts];
QuantumField[___,Particle[PseudoScalar[0],___],___][_]:=0;
QuantumField[___,Particle[Vector[0],___],___][_]:=0;
(*QuantumField[___,Particle[AxialVector[0],___],___][_]:=0;*)
QuantumField[Particle[AxialVector[0], ___], ___, SUNIndex[0]][_]:=0;

(* To simplify algebra, above we set the iso-vector components
of the vector and axial-vector sources to zero and below
we identify the iso-spin zero or iso-scalar component of the
vector field with the photon field of the covariant derivative
below *)

QuantumField[a___,Particle[Vector[1],b___],c___,SUNIndex[0]][x_]:=
QuantumField[a,Particle[Vector[1],b],c][x];

(* ************************************************************** *)

(* Adjoints and conjugates *)

Adjoint[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2|12],___],___][_]] = p;

Adjoint[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2|12],___],___]] = p;

Unprotect[Conjugate];

Conjugate[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2|12],___],___][_]] = p;

Conjugate[p:QuantumField[___,Particle[
(Vector|AxialVector|Scalar|PseudoScalar)[0|1|2|12],___],___]] = p;

Protect[Conjugate];

(* ************************************************************** *)

(* Antiparticles *)

ChargeConjugate[Pion] = Pion;
ChargeConjugate[Vector[0]] = Vector[0];
ChargeConjugate[AxialVector[0]] = AxialVector[0];
ChargeConjugate[Scalar[0]] = Scalar[0];
ChargeConjugate[Scalar[1]] = Scalar[1];
ChargeConjugate[PseudoScalar[0]] = PseudoScalar[0];
ChargeConjugate[PseudoScalar[1]] = PseudoScalar[1];
ChargeConjugate[PionPlus] = PionMinus;
ChargeConjugate[PionMinus] = PionPlus;
ChargeConjugate[PionZero] = PionZero;
ChargeConjugate[KaonMinus] = KaonPlus;
ChargeConjugate[KaonPlus] = KaonMinus;
ChargeConjugate[KaonZero] = KaonZeroBar;
ChargeConjugate[KaonZeroBar] = KaonZero;
ChargeConjugate[EtaMeson] = EtaMeson;

(* ************************************************************** *)

(* Constants *)

(* When calculating infrared divergences, the photon mass
should not be set to zero *)

(*ParticleMass[Photon,___]:=0;
ParticleMass[Photon[0],___]:=0;*)

(*CouplingConstant[ChPTPhoton2[4],1,___][___]=0;
CouplingConstant[ChPTPhoton2[4],2,___][___]=0;
CouplingConstant[ChPTPhoton2[4],3,___][___]=0;
CouplingConstant[ChPTPhoton2[4],4,___][___]=0;
CouplingConstant[ChPTPhoton2[4],5,___][___]=0;
CouplingConstant[ChPTPhoton2[4],6,___][___]=0;
CouplingConstant[ChPTPhoton2[4],7,___][___]=0;
CouplingConstant[ChPTPhoton2[4],8,___][___]=0;
CouplingConstant[ChPTPhoton2[4],9,___][___]=0;
CouplingConstant[ChPTPhoton2[4],10,___][___]=0;
CouplingConstant[ChPTPhoton2[4],11,___][___]=0;
CouplingConstant[ChPTPhoton2[4],12,___][___]=0;*)

(* ************************************************************** *)

(* SU(3) meson matrix PhiMeson instead of Pion *)

BeginPackage["Phi`Objects`", {"Phi`",
"FeynCalc`"}];
Begin["`Private`"];

MM[x_?(! NumberQ[#] &), h___, opts___Rule] /; (fcexpt/.Flatten[{opts}]/.Options[MM]) :=

	UFieldMatrix[fcqf[(Particle[PhiMeson, h])][x], ##] & @@
	Union[OptionsSelect[UFieldMatrix, opts], OptionsSelect[UMatrix, opts]];
MM[ii_?NumberQ, x_, h___, opts___Rule] /; (fcexpt/.Flatten[{opts}]/.Options[MM]) :=
	UFieldMatrix[ii, fcqf[(Particle[PhiMeson, h])][x], ##] & @@
	Union[OptionsSelect[UFieldMatrix, opts], OptionsSelect[UMatrix, opts]];
SMM[x_, h___, opts___Rule] /; (fcexpt/.Flatten[{opts}]/.Options[SMM]) := MM[1/2, x, h, opts];
MMS[x_, h___, opts___Rule] /; (fcexpt/.Flatten[{opts}]/.Options[MMS]) :=
	UFieldMatrixSeries[fcqf[(Particle[PhiMeson, h])][x], ##] & @@
	Union[OptionsSelect[UFieldMatrix, opts], OptionsSelect[UMatrix, opts]];

End[];
EndPackage[];

(* ************************************************************** *)

(* Redefinition of the left and right components.
Urech have them the other way round and without the 1/2.
Also its necessary in order to not have the AxialVector (Vector)
part set to zero *)

IsoVector[QuantumField[aa___, Particle[LeftComponent[a_,opts0___Rule],i___],
bb___],opts___][x_]/;(Explicit/.{opts0}/.Options[LeftComponent]):=
(
IsoVector[QuantumField[aa, Particle[Vector[a],i],bb],opts][x]-
IsoVector[QuantumField[aa, Particle[AxialVector[a],i],bb],opts][x]);

IsoVector[QuantumField[aa___, Particle[RightComponent[a_,opts0___Rule],i___],bb___],
opts___][x_]/;(Explicit/.{opts0}/.Options[RightComponent]):=(
IsoVector[QuantumField[aa, Particle[Vector[a],i],bb],opts][x]+
IsoVector[QuantumField[aa, Particle[AxialVector[a],i],bb],opts][x]);

QuantumField[aa___, Particle[LeftComponent[a_,opts0___Rule],i___],bb___][x_]/;
(Explicit/.{opts0} /. Options[LeftComponent]):=
(QuantumField[aa, Particle[Vector[a],i],bb][x]-
		QuantumField[aa, Particle[AxialVector[a],i],bb][x]);

QuantumField[aa___, Particle[RightComponent[a_,opts0___Rule],i___],bb___][x_]/;
(Explicit/.{opts0} /. Options[RightComponent]):=
(QuantumField[aa, Particle[Vector[a],i],bb][x]+
		QuantumField[aa, Particle[AxialVector[a],i],bb][x]);

(* ************************************************************** *)

(* Spurions *)

(* I think we always want this ?*)

$Substitutions = Append[$Substitutions,
UMatrix[UChiralSpurion[___]][___] :>
UQuarkChargeMatrix[RenormalizationState[0], DiagonalToU -> True]];
$Substitutions = Append[$Substitutions,
UMatrix[UChiralSpurionRight[___]][___] :>
UQuarkChargeMatrix[RenormalizationState[0], DiagonalToU -> True]];
$Substitutions = Append[$Substitutions,
UMatrix[UChiralSpurionLeft[___]][___] :>
UQuarkChargeMatrix[RenormalizationState[0], DiagonalToU -> True]];

(* ************************************************************** *)

(* The H fields *)

$Substitutions = Append[$Substitutions,
HRight[x_, ar___RenormalizationState,br___RenormalizationScheme,
cr___ExpansionState,(opts___Rule|opts___List)] :>
NM[Adjoint[SMM[x,ar,br,cr]], UMatrix[UChiralSpurionRight@@OptionsSelect[UChiralSpurionRight,opts],
	Sequence@@OptionsSelect[UMatrix,opts]][x],
SMM[x,ar,br,cr]] +
NM[SMM[x,ar,br,cr], UMatrix[UChiralSpurionLeft@@OptionsSelect[UChiralSpurionLeft,opts],
	Sequence@@OptionsSelect[UMatrix,opts]][x],
Adjoint[SMM[x,ar,br,cr]]]];

$Substitutions = Append[$Substitutions,
HLeft[x_, ar___RenormalizationState,br___RenormalizationScheme,
cr___ExpansionState,(opts___Rule|opts___List)] :>
NM[Adjoint[SMM[x,ar,br,cr]], UMatrix[UChiralSpurionRight@@OptionsSelect[UChiralSpurionRight,opts],
	Sequence@@OptionsSelect[UMatrix,opts]][x],
SMM[x,ar,br,cr]] -
NM[SMM[x,ar,br,cr], UMatrix[UChiralSpurionLeft@@OptionsSelect[UChiralSpurionLeft,opts],
	Sequence@@OptionsSelect[UMatrix,opts]][x],
Adjoint[SMM[x,ar,br,cr]]]];


$Substitutions = Append[$Substitutions,
HRight :> NM[Adjoint[SMM],UMatrix[UChiralSpurionRight[],SMM]] +
		NM[SMM,UMatrix[UChiralSpurionLeft[],Adjoint[SMM]]]];

$Substitutions = Append[$Substitutions,
HLeft :> NM[Adjoint[SMM],UMatrix[UChiralSpurionRight[],SMM]] -
		NM[SMM,UMatrix[UChiralSpurionLeft[],Adjoint[SMM]]]];




(* ************************************************************** *)

(* The G fields *)

$Substitutions = Append[$Substitutions,
GRight[mu_,ar___RenormalizationState,br___RenormalizationScheme,
cr___ExpansionState,(opts___Rule|opts___List)][x_] :> UGeneratorMatrixIsoDot[QuantumField[
		Particle[RightComponent[0,
	Sequence@@OptionsSelect[RightComponent,opts]],ar,br,cr],{mu}][x]]+
	NM[UMatrix[UChiralSpurionRight@@OptionsSelect[UChiralSpurionRight,opts],
	Sequence@@OptionsSelect[UMatrix,opts]][x],
				QuantumField[Particle[Photon,ar,br,cr],{mu}][x]]];

$Substitutions = Append[$Substitutions,
GLeft[mu_,ar___RenormalizationState,br___RenormalizationScheme,
cr___ExpansionState,(opts___Rule|opts___List)][x_] :> UGeneratorMatrixIsoDot[QuantumField[
		Particle[LeftComponent[0,
	Sequence@@OptionsSelect[LeftComponent,opts]],ar,br,cr],{mu}][x]]+
	NM[UMatrix[UChiralSpurionLeft@@OptionsSelect[UChiralSpurionLeft,opts],
	Sequence@@OptionsSelect[UMatrix,opts]][x],
				QuantumField[Particle[Photon,ar,br,cr],{mu}][x]]];

$Substitutions = Append[$Substitutions,
GRight[mu_, nu_?(FreeQ[#,
		RenormalizationState | RenormalizationScheme | ExpansionState |
		Rule] &), ar___RenormalizationState,br___RenormalizationScheme,
cr___ExpansionState,(opts___Rule|opts___List)][x_] :>
FieldDerivative[GRight[nu,ar,br,cr,opts][x], x, {mu}] -
				FieldDerivative[GRight[mu,ar,br,cr,opts][x],x, {nu}] -
I*(NM[GRight[mu,ar,br,cr,opts][x], GRight[nu,ar,br,cr,opts][x]] -
NM[GRight[nu,ar,br,cr,opts][x], GRight[mu,ar,br,cr,opts][x]])];

$Substitutions = Append[$Substitutions,
GLeft[mu_, nu_?(FreeQ[#,
		RenormalizationState | RenormalizationScheme | ExpansionState |
		Rule] &), ar___RenormalizationState,br___RenormalizationScheme,
cr___ExpansionState,(opts___Rule|opts___List)][x_] :>
FieldDerivative[GLeft[nu,ar,br,cr,opts][x], x, {mu}] -
				FieldDerivative[GLeft[mu,ar,br,cr,opts][x],x, {nu}] -
I*(NM[GLeft[mu,ar,br,cr,opts][x], GLeft[nu,ar,br,cr,opts][x]] -
NM[GLeft[nu,ar,br,cr,opts][x], GLeft[mu,ar,br,cr,opts][x]])];

$Substitutions = Append[$Substitutions,
CQRight[mu_,ar___RenormalizationState,br___RenormalizationScheme,
cr___ExpansionState,(opts___Rule|opts___List)][x_] :> FieldDerivative[UMatrix[UChiralSpurionRight@@
OptionsSelect[UChiralSpurionRight,opts],
	Sequence@@OptionsSelect[UMatrix,opts]][x], x, {mu}]-
	I*(NM[GRight[mu,ar,br,cr,opts][x],
	UMatrix[UChiralSpurionRight@@OptionsSelect[UChiralSpurionRight,opts],
	Sequence@@OptionsSelect[UMatrix,opts]][x]]-
	NM[UMatrix[UChiralSpurionRight@@OptionsSelect[UChiralSpurionRight,opts],
	Sequence@@OptionsSelect[UMatrix,opts]][x],
	GRight[mu,ar,br,cr,opts][x]])];

$Substitutions = Append[$Substitutions,
CQLeft[mu_,ar___RenormalizationState,br___RenormalizationScheme,
cr___ExpansionState,(opts___Rule|opts___List)][x_] :> FieldDerivative[UMatrix[UChiralSpurionLeft@@
OptionsSelect[UChiralSpurionLeft,opts],
	Sequence@@OptionsSelect[UMatrix,opts]][x], x, {mu}]-
	I*(NM[GLeft[mu,ar,br,cr,opts][x],
	UMatrix[UChiralSpurionLeft@@OptionsSelect[UChiralSpurionLeft,opts],
	Sequence@@OptionsSelect[UMatrix,opts]][x]]-
	NM[UMatrix[UChiralSpurionLeft@@OptionsSelect[UChiralSpurionLeft,opts],
	Sequence@@OptionsSelect[UMatrix,opts]][x],
	GLeft[mu,ar,br,cr,opts][x]])];


$Substitutions = Append[$Substitutions,
GRight[mu_] :> UGeneratorMatrixIsoDot[QuantumField[
				Particle[RightComponent[0]],{mu}]]+
			NM[UMatrix[UChiralSpurionRight[]],
				QuantumField[Particle[Photon],{mu}]] ];

$Substitutions = Append[$Substitutions,
GLeft[mu_] :> UGeneratorMatrixIsoDot[QuantumField[
				Particle[LeftComponent[0]],{mu}]]+
			NM[UMatrix[UChiralSpurionLeft[]],
				QuantumField[Particle[Photon],{mu}]]];

$Substitutions = Append[$Substitutions,
GRight[mu_, nu_] :> FieldDerivative[GRight[nu], {mu}] -
				FieldDerivative[GRight[mu], {nu}] -
I*(NM[GRight[mu], GRight[nu]] - NM[GRight[nu], GRight[mu]])];

$Substitutions = Append[$Substitutions,
GLeft[mu_, nu_] :> FieldDerivative[GLeft[nu], {mu}] -
				FieldDerivative[GLeft[mu], {nu}] -
I*(NM[GLeft[mu], GLeft[nu]] - NM[GLeft[nu], GLeft[mu]])];



$Substitutions = Append[$Substitutions,
CQRight[mu_] :> FieldDerivative[UMatrix[UChiralSpurionRight[]],{mu}]-
				I*(NM[GRight[mu], UMatrix[UChiralSpurionRight[]]]-
				NM[UMatrix[UChiralSpurionRight[]], GRight[mu]])];

$Substitutions = Append[$Substitutions,
CQLeft[mu_] :> FieldDerivative[UMatrix[UChiralSpurionLeft[]],{mu}]-
				I*(NM[GLeft[mu], UMatrix[UChiralSpurionLeft[]]]-
				NM[UMatrix[UChiralSpurionLeft[]], GLeft[mu]])];


(*Added 8/2-2002*)

$PreSubstitutions[0] = Append[$PreSubstitutions[0],
GRight[mu_] :> GRight[mu, SubArgs][SubX]];

$PreSubstitutions[0] = Append[$PreSubstitutions[0],
GLeft[mu_] :> GLeft[mu, SubArgs][SubX]];

$PreSubstitutions[0] = Append[$PreSubstitutions[0],
GRight[mu_, nu_] :> GRight[mu, nu, SubArgs][SubX] /;
FreeQ[{nu}, Rule|RenormalizationsState|RenormalizationScheme|ExpansionState]];

$PreSubstitutions[0] = Append[$PreSubstitutions[0],
GLeft[mu_, nu_] :> GLeft[mu, nu, SubArgs][SubX] /;
FreeQ[{nu}, Rule|RenormalizationsState|RenormalizationScheme|ExpansionState]];


$PreSubstitutions[0] = Append[$PreSubstitutions[0],
CQRight[mu_] :> CQRight[mu, SubArgs][SubX]];

$PreSubstitutions[0] = Append[$PreSubstitutions[0],
CQLeft[mu_] :> CQLeft[mu, SubArgs][SubX]];


(* ************************************************************** *)

(* The Gamma_mu field *)

(* We're overriding *)
$Substitutions = Select[$Substitutions,
(!MatchQ[#, (_?((! FreeQ[#, UGamma, Heads -> True]) &)) :> _])&];

$Substitutions = Append[$Substitutions,
UGamma[mu_,ar___RenormalizationState,br___RenormalizationScheme,
cr___ExpansionState,(opts___Rule|opts___List)][x_] :>

1/2*(

NM[Adjoint[SMM[x,ar,br,cr,opts]],
FDr[SMM[x,ar,br,cr,opts],x,{mu}]]-

I*NM[Adjoint[SMM[x,ar,br,cr,opts]],
GRight[mu,ar,br,cr,opts][x],
SMM[x,ar,br,cr,opts]]+

NM[SMM[x,ar,br,cr,opts],
FDr[Adjoint[SMM[x,ar,br,cr,opts]],x,{mu}]]-

I*NM[SMM[x,ar,br,cr,opts],
GLeft[mu,ar,br,cr,opts][x],
Adjoint[SMM[x,ar,br,cr,opts]]]

)];

$Substitutions = Append[$Substitutions, UGamma[mu_] :>

1/2*(

NM[Adjoint[SMM],FDr[SMM,{mu}]]-

I*NM[Adjoint[SMM],GRight[mu],SMM]+

NM[SMM,FDr[Adjoint[SMM],{mu}]]-

I*NM[SMM,GLeft[mu],Adjoint[SMM]]

)];

(* ************************************************************** *)

(* The nabla of the u_mu field *)

Options[CovariantNabla] = {Explicit -> True};

CovariantNabla[aa_,x_,loris__LorentzIndex,lori1_LorentzIndex, opts___Rule]:=
(newfuncc[1]=CovariantNabla[aa,x,lori1, opts];
Do[newfuncc[rep+1]=CovariantNabla[
newfuncc[rep],x,##,opts]&@@Take[{loris},{-rep}],
{rep,1,Length[{loris}]}];newfuncc[Length[{loris}]+1]);

CovariantNabla[aa_,x_,{loris__},rest___] :=
CovariantNabla[aa,x,##,rest]& @@ LorentzIndex /@ {loris};

(* -------------------------------------------------------------- *)

CovariantNabla[aa_,{lori_},(opts___Rule|opts___List)] /;
(Explicit /. Flatten[{opts}] /. Options[CovariantNabla]) :=

FieldDerivative[aa,{lori}] +

NM[UGamma[lori],aa] -
NM[aa,UGamma[lori]];

CovariantNabla[aa_,x_,
lori_LorentzIndex,
ar___RenormalizationState,br___RenormalizationScheme,
cr___ExpansionState,opts___Rule] /;
(Explicit /. Flatten[{opts}] /. Options[CovariantNabla]) :=

FieldDerivative[aa,x,lori] +

NM[UGamma[lori,ar,br,cr,
Sequence@@Select[{opts},FreeQ[#,Explicit]&]][x],aa] -
NM[aa,UGamma[lori,ar,br,cr,
Sequence@@Select[{opts},FreeQ[#,Explicit]&]][x]];

(* ************************************************************** *)

(* The covariant derivative *)

CovariantFieldDerivative[aa_,x_,{loris__},rest___] :=
CovariantFieldDerivative[aa,x,##,rest]& @@ LorentzIndex /@ {loris};

(* -------------------------------------------------------------- *)

(* EM-ChPT -  Urech *)

CovariantFieldDerivative[aa_,x_,lori_LorentzIndex,
ar___RenormalizationState,br___RenormalizationScheme,
cr___ExpansionState,(opts___Rule|opts___List)] /;
(Explicit /. Flatten[{opts}] /. Options[CovariantFieldDerivative]) :=

FieldDerivative[aa,x,lori] +

I*NM[aa,UGeneratorMatrixIsoDot[QuantumField[Particle[
LeftComponent[0],ar,br],lori][x],opts]] -

I*NM[UGeneratorMatrixIsoDot[QuantumField[Particle[
RightComponent[0],ar,br],lori][x],opts],aa]+

I*
NM[aa,UMatrix[UChiralSpurionLeft[ar,br,cr,
Sequence@@OptionsSelect[UChiralSpurionLeft,opts]],
Sequence@@OptionsSelect[UMatrix,opts]][x],
QuantumField[Particle[Photon,ar,br],lori][x]]-

I*
NM[UMatrix[UChiralSpurionRight[ar,br,cr,
Sequence@@OptionsSelect[UChiralSpurionRight,opts]],
Sequence@@OptionsSelect[UMatrix,opts]][x],
QuantumField[Particle[Photon,ar,br],lori][x],aa];

(* ************************************************************** *)
(* Modify the photon propagator to general Lorentz gange *)

Phi`Couplings`GenProps[a:Vector1] :=
{FeynArts`AnalyticalPropagator[
FeynArts`External][s a[i, mom, {li2}]] ==
PolarizationVector[a[i], mom, li2],
FeynArts`AnalyticalPropagator[
FeynArts`Internal][s a[i, mom, {li1} -> {li2}]] ==
I*PropagatorDenominator[mom, FeynArts`Mass[a[i]]]*
(-MetricTensor[li1, li2] +
(1 - 1/$Gauge)*
FourVector[mom, li1]*FourVector[mom, li2]*
1/(PropagatorDenominator1[mom, FeynArts`Mass[a[i]]])
)};

(* ************************************************************** *)

(* An identity easily shown *)

Phi`Objects`HLeftRightTrick::usage =
	"HLeftRightTrick[exp] expresses CovariantNabla[HRight[x], x, {li}] \
and CovariantNabla[HLeft[x], x, {li}] in terms of \
SMM, USmall, HRight and HLeft";

HLeftRightTrick[exp_] :=
	exp /.
	{CovariantNabla[HRight[x_, opts___Rule], x_, {li_} | LorentzIndex[li_]] :>
		I/2 UCommutator[USmall[LorentzIndex[li], opts][x], HLeft[x, opts]] +
			NM[Adjoint[SMM[x, opts]], CQRight[LorentzIndex[li], opts][x], SMM[x, opts]] +
			NM[SMM[x, opts], CQLeft[LorentzIndex[li], opts][x], Adjoint[SMM[x, opts]]],

	CovariantNabla[HLeft[x_, opts___Rule], x_, {li_} | LorentzIndex[li_]] :>
		I/2 UCommutator[USmall[LorentzIndex[li], opts][x], HRight[x, opts]] +
			NM[Adjoint[SMM[x, opts]], CQRight[LorentzIndex[li], opts][x], SMM[x, opts]] -
			NM[SMM[x, opts], CQLeft[LorentzIndex[li], opts][x], Adjoint[SMM[x, opts]]],

	(*Swap order of UGamma HRight and UGamma HLeft*)
	NM[UGamma[li_, opts1___Rule][x_], HRight[x, opts2___Rule]] :>
		Block[{opts},
			opts = Sequence @@ OptionsSelect[CovariantNabla, opts1, opts2];
			CovariantNabla[HRight[x, opts2], x, {li}] -
			FieldDerivative[HRight[x, opts2], x, {li}] +
			NM[HRight[x, opts2], UGamma[li, opts1][x]]],

	NM[UGamma[li_, opts1___Rule][x_], HLeft[x, opts2___Rule]] :>
		Block[{opts},
			opts = Sequence @@ OptionsSelect[CovariantNabla, opts1, opts2];
			CovariantNabla[HLeft[x, opts2], x, {li}] -
			FieldDerivative[HLeft[x, opts2], x, {li}] +
			NM[HLeft[x, opts2], UGamma[li, opts1][x]]],

	UTrace1[NM[HRight[x, opts2___Rule], m__,
			UGamma[li_, opts1___Rule][x_]]] :>
		Block[{opts},
			opts = Sequence @@ OptionsSelect[CovariantNabla, opts1, opts2];
			UTrace1[NM[m, CovariantNabla[HRight[x, opts2], x, {li}] -
				FieldDerivative[HRight[x, opts2], x, {li}] +
				NM[HRight[x, opts2], UGamma[li, opts1][x]]]]],

	UTrace1[NM[HLeft[x, opts2___Rule], m__,
			UGamma[li_, opts1___Rule][x_]]] :>
		Block[{opts},
			opts = Sequence @@ OptionsSelect[CovariantNabla, opts1, opts2];
			UTrace1[NM[m, CovariantNabla[HLeft[x, opts2], x, {li}] -
				FieldDerivative[HLeft[x, opts2], x, {li}] +
				NM[HLeft[x, opts2], UGamma[li, opts1][x]]]]]};

(* ************************************************************** *)

(* Setting of options and $-variables, etc. *)

SetOptions[Renormalize,SUNN->3];
SetOptions[WriteOutUMatrices,SUNN->3];
SetOptions[WriteOutIsoVectors,SUNN->3];
SetOptions[UQuarkMass,SUNN->3,DiagonalToU->True];
SetOptions[UMatrix,SUNN->3];
SetOptions[IsoVector,SUNN->3];
SetOptions[UGenerator,SUNN->3];
SetOptions[UTrace,SUNN->3];
SetOptions[SUNReduce,SUNN->3];
SetOptions[ExpandU,SUNN->3];
SetOptions[FAToFC,EqualMasses->False];
SetOptions[DiscardTerms,
Retain->{Particle[PhiMeson,RenormalizationState[0]]->4}];
SetOptions[CovariantFieldDerivative,SUNN->3];
SetOptions[UPerturb, SUNN -> 3];
SetOptions[UReduce, SUNN -> 3, UDimension -> 3];
SetOptions[SMMToMM,SUNN -> 3];
SetOptions[CharacteristicCoefficient, UDimension -> 3];
SetOptions[CayleyHamilton, UDimension -> 3];
SetOptions[CayleyHamiltonRules, SUNN -> 3, UDimension -> 3];
tmpoptscdr=Options[CovariantFieldDerivative];
tmpoptsmm=Options[MM];
SetOptions[CovariantFieldDerivative, Explicit -> False];
SetOptions[MM, Explicit -> False];
SetOptions[CayleyHamiltonTrick, SUNN -> 3, UDimension -> 3,
	UMatrices :> {{I NM[
			Adjoint[CovariantFieldDerivative[MM[Global`x_], Global`x_, {Global`\[Rho]1_}]],
			MM[Global`x_]],
		I NM[Adjoint[MM[Global`x_]],
			CovariantFieldDerivative[MM[Global`x_], Global`x_, {Global`\[Rho]2_}]],
		I NM[Adjoint[CovariantFieldDerivative[MM[Global`x_], Global`x_, {Global`\[Rho]1_}]],
			MM[Global`x_]],
		I NM[Adjoint[MM[Global`x_]],
			CovariantFieldDerivative[MM[Global`x_], Global`x_, {Global`\[Rho]2_}]]}}];
SetOptions[CovariantFieldDerivative, Sequence@@tmpoptscdr];
SetOptions[MM,Sequence@@tmpoptsmm];

(* Auxiliary functions *)

SetOptions[UPerturb,
UFields -> {HRight, HLeft, USmall, UChiPlus, UChiMinus, UFPlus, UFMinus, MM}];

xi[x_] :=
IsoDot[IsoVector[QuantumField[Particle[PseudoScalar[12]]]][x],
	IsoVector[UMatrix[UGenerator[]]]];

(*See Ecker 1992, CERN-TH-6660/92*)

uExpRight[x_,a___RenormalizationState,b___RenormalizationScheme,
	c___ExpansionState,opts___Rule]:=
	NM[SMM[x,Sequence@@OptionsSelect[SMM,opts]],
	UFieldMatrix[
		DecayConstant[UPerturbation,a,b,c]/DecayConstant[PhiMeson,a,b,c]/
		Sqrt[2],QuantumField[Particle[UPerturbation,a,b,c]][x],
		Sequence@@OptionsSelect[UFieldMatrix,opts]]];

uExpLeftAdj[x_,a___RenormalizationState,b___RenormalizationScheme,
	c___ExpansionState,opts___Rule]:=
	NM[UFieldMatrix[
		DecayConstant[UPerturbation,a,b,c]/DecayConstant[PhiMeson,a,b,c]/
		Sqrt[2],QuantumField[Particle[UPerturbation,a,b,c]][x],
		Sequence@@OptionsSelect[UFieldMatrix,opts]],
	SMM[x,Sequence@@OptionsSelect[SMM,opts]]];

(* The u_mu field *)

(*Keep things compact*)
SetOptions[CovariantNabla, Explicit -> False];

UCoefficient[USmall][0][li_, x_] = USmall[li][x];
UCoefficient[USmall][1][li_, x_] =
		-Sqrt[2]/DecayConstant[PhiMeson] CovariantNabla[xi[x], x, {li}] +
Sqrt[2]QuantumField[Particle[UPerturbation], LorentzIndex[li]][x]HLeft[x];
UCoefficient[USmall][2][li_, x_] =
1/4/DecayConstant[PhiMeson]^2 UCommutator[xi[x],
	UCommutator[USmall[li][x], xi[x]]] -
I/DecayConstant[PhiMeson]QuantumField[Particle[UPerturbation],
	LorentzIndex[li]][x]UCommutator[xi[x], HRight[x]];
UCoefficient[USmall][do_?((# > 2) &)][li_, x_] :=
	UCoefficient[USmall][do][li, x] = (Message[UPerturb::"nocoeff", do];
		DiscardTerms[
			I*NM[Adjoint[uExpRight[x, ExpansionOrder -> do]],
					CDr[NM[uExpRight[x, ExpansionOrder -> do],
						uExpLeftAdj[x, ExpansionOrder -> do]], x, {li},
					Explicit -> True],
					Adjoint[uExpLeftAdj[x, ExpansionOrder -> do]]] /. {QuantumField[pd___, Particle[Photon], LorentzIndex[l_]][xx_] ->
	QuantumField[pd, Particle[Photon], {l}][xx] +
		Sqrt[2]QuantumField[Particle[UPerturbation], {l}][xx]} //
				NMExpand // Expand,
			Retain -> {Particle[UPerturbation] -> do}] // UReduce);

(* The H_R - field*)

UCoefficient[HRight][0][x_] = HRight[x];
UCoefficient[HRight][1][x_] =
-I/Sqrt[2]/DecayConstant[PhiMeson]UCommutator[xi[x], HLeft[x]];
UCoefficient[HRight][2][x_] =
-1/4/DecayConstant[PhiMeson]^2 UCommutator[xi[x],
	UCommutator[xi[x], HRight[x]]];
UCoefficient[HRight][do_?((# > 2) &)][x_] :=
	UCoefficient[HRight][do][x] = (Message[UPerturb::"nocoeff", do];
	DiscardTerms[
NM[Adjoint[uExpRight[x, ExpansionOrder -> do]],
		UMatrix[UChiralSpurionRight[]][x],
		uExpRight[x, ExpansionOrder -> do]] +
		NM[uExpLeftAdj[x, ExpansionOrder -> do],
		UMatrix[UChiralSpurionLeft[]][x],
		Adjoint[uExpLeftAdj[x, ExpansionOrder -> do]]] // NMExpand //
	Expand, Retain -> {Particle[UPerturbation] -> do}] // UReduce);

(* The H_L - field *)

UCoefficient[HLeft][0][x_] = HLeft[x];
UCoefficient[HLeft][1][x_] =
-I/Sqrt[2]/DecayConstant[PhiMeson]UCommutator[xi[x], HRight[x]];
UCoefficient[HLeft][2][x_] =
-1/4/DecayConstant[PhiMeson]^2 UCommutator[xi[x],
	UCommutator[xi[x], HLeft[x]]];
UCoefficient[HLeft][do_?((# > 2) &)][x_] :=
	UCoefficient[HLeft][do][x] = (Message[UPerturb::"nocoeff", do];
	DiscardTerms[
NM[Adjoint[uExpRight[x, ExpansionOrder -> do]],
		UMatrix[UChiralSpurionRight[]][x],
		uExpRight[x, ExpansionOrder -> do]] -
		NM[uExpLeftAdj[x, ExpansionOrder -> do],
		UMatrix[UChiralSpurionLeft[]][x],
		Adjoint[uExpLeftAdj[x, ExpansionOrder -> do]]] // NMExpand //
	Expand, Retain -> {Particle[UPerturbation] -> do}] // UReduce);

(*Return to defaults*)
SetOptions[CovariantNabla, Explicit -> True];

(* (7.14) and (7.20) from Gasser and Leutwyler (1985) *)

gammaRule :=
FieldDerivative[UGamma[LorentzIndex[li1_],opts___Rule][x_], x_, LorentzIndex[li2_]] /;
Sort[{li1,li2}] =!= {li1,li2} :>
	FieldDerivative[UGamma[LorentzIndex[li2],opts][x], x,
		LorentzIndex[li1]] +
	UCommutator[UGamma[LorentzIndex[li1],opts][x],
		UGamma[LorentzIndex[li2],opts][x]] -
	1/4 UCommutator[USmall[LorentzIndex[li1],Sequence@@OptionsSelect[USmall,opts]][x],
		USmall[LorentzIndex[li2],Sequence@@OptionsSelect[USmall,opts]][x]] +
	1/2 I NM[Adjoint[SMM[x,Sequence@@OptionsSelect[SMM,opts]]],
		GRight[LorentzIndex[li1],LorentzIndex[li2],opts][x],
		SMM[x,Sequence@@OptionsSelect[SMM,opts]]] +
	1/2 I NM[SMM[x,Sequence@@OptionsSelect[SMM,opts]],
		GLeft[LorentzIndex[li1],LorentzIndex[li2],opts][x],
		Adjoint[SMM[x,Sequence@@OptionsSelect[SMM,opts]]]];


UGammaTrick[exp_] := exp /. gammaRule;

(* The chi_+ field*)

UCoefficient[UChiPlus][0][x_] = UChiPlus[x];
UCoefficient[UChiPlus][1][x_] =
-I/Sqrt[2]/DecayConstant[PhiMeson]UAntiCommutator[xi[x],
	UChiMinus[x]];
UCoefficient[UChiPlus][2][x_] =
	-1/4/DecayConstant[PhiMeson]^2 UAntiCommutator[xi[x],
	UAntiCommutator[xi[x], UChiPlus[x]]];
UCoefficient[UChiPlus][do_?((# > 2) &)][x_] :=
	UCoefficient[UChiPlus][do][x] = (Message[UPerturb::"nocoeff", do];
		DiscardTerms[
			NM[Adjoint[uExpRight[x, ExpansionOrder -> do]],
					UMatrix[UChi[]][x],
					Adjoint[uExpLeftAdj[x, ExpansionOrder -> do]]] +
				NM[uExpLeftAdj[x, ExpansionOrder -> do],
					Adjoint[UMatrix[UChi[]][x]],
					uExpRight[x, ExpansionOrder -> do]] // NMExpand // Expand,
			Retain -> {Particle[UPerturbation] -> do}] // UReduce);

$EOMRules :=

{UTrace1[NM[Adjoint[MM[x_]], CovariantFieldDerivative[MM[x_], x_, LorentzIndex[mu_]],
Adjoint[UMatrix[UChi[]][x_]], CovariantFieldDerivative[MM[x_], x_,
	LorentzIndex[mu_]]]] ->
-(UTrace1[
				NM[Adjoint[MM[x]], UMatrix[UChi[]][x]]]^2/
			6 - (UTrace1[NM[Adjoint[MM[x]], UMatrix[UChi[]][x]]]*
				UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], MM[x]]])/3 +
			UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], MM[x]]]^2/6 +
			UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], UMatrix[UChi[]][x]]] -
			UTrace1[NM[Adjoint[MM[x]], UMatrix[UChi[]][x], Adjoint[MM[x]],
				UMatrix[UChi[]][x]]]/2 -
			UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], MM[x],
				Adjoint[UMatrix[UChi[]][x]], MM[x]]]/
			2 - (-UTrace1[
					NM[Adjoint[
						CovariantFieldDerivative[MM[x], x,
						LorentzIndex[mu]]],
					CovariantFieldDerivative[UMatrix[UChi[]][x], x,
						LorentzIndex[mu]]]] -
				UTrace1[
				NM[Adjoint[
					CovariantFieldDerivative[UMatrix[UChi[]][x], x,
						LorentzIndex[mu]]],
					CovariantFieldDerivative[MM[x], x,
					LorentzIndex[mu]]]] -
				UTrace1[
				NM[MM[x],
					Adjoint[
					CovariantFieldDerivative[MM[x], x,
						LorentzIndex[mu]]], UMatrix[UChi[]][x],
					Adjoint[
					CovariantFieldDerivative[MM[x], x,
						LorentzIndex[mu]]]]]))+

(-2*CouplingConstant[ChPTVirtualPhotons2[2]]*
UTrace1[NM[Adjoint[MM[x]], UMatrix[UChiralSpurionRight[]][x], UMatrix[UChi[]][x],
	UMatrix[UChiralSpurionLeft[]][x]]])/DecayConstant[PseudoScalar[1]]^2 -
(2*CouplingConstant[ChPTVirtualPhotons2[2]]*
UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], UMatrix[UChiralSpurionRight[]][x], MM[x],
	UMatrix[UChiralSpurionLeft[]][x]]])/DecayConstant[PseudoScalar[1]]^2 +
(2*CouplingConstant[ChPTVirtualPhotons2[2]]*
UTrace1[NM[Adjoint[MM[x]], UMatrix[UChiralSpurionRight[]][x], MM[x],
	Adjoint[UMatrix[UChi[]][x]], MM[x], UMatrix[UChiralSpurionLeft[]][x]]])/
DecayConstant[PseudoScalar[1]]^2 + (2*CouplingConstant[ChPTVirtualPhotons2[2]]*
UTrace1[NM[MM[x], UMatrix[UChiralSpurionLeft[]][x], Adjoint[MM[x]],
	UMatrix[UChi[]][x], Adjoint[MM[x]], UMatrix[UChiralSpurionRight[]][x]]])/
DecayConstant[PseudoScalar[1]]^2,

UTrace1[NM[Adjoint[CovariantFieldDerivative[MM[x_], x_, LorentzIndex[mu_]]],
CovariantFieldDerivative[MM[x_], x_, LorentzIndex[mu_]],
	Adjoint[UMatrix[UChi[chopts___]][x_]], MM[x_]]] ->
-(-(UTrace1[
				NM[Adjoint[MM[x]], UMatrix[UChi[]][x]]]^2/
			6 - (UTrace1[NM[Adjoint[MM[x]], UMatrix[UChi[]][x]]]*
				UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], MM[x]]])/3 +
			UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], MM[x]]]^2/6 +
			UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], UMatrix[UChi[]][x]]] -
			UTrace1[NM[Adjoint[MM[x]], UMatrix[UChi[]][x], Adjoint[MM[x]],
				UMatrix[UChi[]][x]]]/2 -
			UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], MM[x],
				Adjoint[UMatrix[UChi[]][x]], MM[x]]]/
			2 - (-UTrace1[
					NM[Adjoint[
						CovariantFieldDerivative[MM[x], x,
						LorentzIndex[mu]]],
					CovariantFieldDerivative[UMatrix[UChi[]][x], x,
						LorentzIndex[mu]]]] -
				UTrace1[
				NM[Adjoint[
					CovariantFieldDerivative[UMatrix[UChi[]][x], x,
						LorentzIndex[mu]]],
					CovariantFieldDerivative[MM[x], x,
					LorentzIndex[mu]]]] -
				UTrace1[
				NM[MM[x],
					Adjoint[
					CovariantFieldDerivative[MM[x], x,
						LorentzIndex[mu]]], UMatrix[UChi[]][x],
					Adjoint[
					CovariantFieldDerivative[MM[x], x,
						LorentzIndex[mu]]]]]))+

(-2*CouplingConstant[ChPTVirtualPhotons2[2]]*
UTrace1[NM[Adjoint[MM[x]], UMatrix[UChiralSpurionRight[]][x], UMatrix[UChi[]][x],
	UMatrix[UChiralSpurionLeft[]][x]]])/DecayConstant[PseudoScalar[1]]^2 -
(2*CouplingConstant[ChPTVirtualPhotons2[2]]*
UTrace1[NM[Adjoint[UMatrix[UChi[]][x]], UMatrix[UChiralSpurionRight[]][x], MM[x],
	UMatrix[UChiralSpurionLeft[]][x]]])/DecayConstant[PseudoScalar[1]]^2 +
(2*CouplingConstant[ChPTVirtualPhotons2[2]]*
UTrace1[NM[Adjoint[MM[x]], UMatrix[UChiralSpurionRight[]][x], MM[x],
	Adjoint[UMatrix[UChi[]][x]], MM[x], UMatrix[UChiralSpurionLeft[]][x]]])/
DecayConstant[PseudoScalar[1]]^2 + (2*CouplingConstant[ChPTVirtualPhotons2[2]]*
UTrace1[NM[MM[x], UMatrix[UChiralSpurionLeft[]][x], Adjoint[MM[x]],
	UMatrix[UChi[]][x], Adjoint[MM[x]], UMatrix[UChiralSpurionRight[]][x]]])/
DecayConstant[PseudoScalar[1]]^2)};


$ExpansionQuantities=Union[$ExpansionQuantities,
{MetricTensor[__],Pair[__]}];

DeclareUMatrix[MM,SMM,UChiMatrix,USmall,UFPlus,UFMinus,UChiPlus,UChiMinus,UGamma,
GRight,GLeft,HRight,HLeft,CQLeft,CQRight,UQuarkChargeMatrix];

$ParticlesInUse={PhiMeson,Pion,Kaon,Photon(*,Vector[0],AxialVector[0]*)};

$PropagatorMassesStates={PhiMeson[0]->{RenormalizationState[0]},
	Kaon[0]->{RenormalizationState[0]},
	AxialVector[0][0]->{RenormalizationState[0]},
	Vector[0][0]->{RenormalizationState[0]},
	Photon[0]->{RenormalizationState[0]}};

$CouplingIsoIndicesSpecifications =
{PhiMeson[0]->{{IsoRange->{1,2,3,4,5,6,7,8},IsoIndicesString->"I"}},
	Kaon[0]->{{IsoRange->{1,2},IsoIndicesString->"J"}},
	AxialVector[0][0]->{{IsoRange->{1,2,3,4,5,6,7,8},IsoIndicesString->"I"}},
Vector[0][0]->{{IsoRange->{1,2,3,4,5,6,7,8},IsoIndicesString->"I"}}};

$MixingFields=
{};

$InsertOnly=
{(*Vector[0][0]->{
FeynArts`Incoming,
FeynArts`Outgoing,
FeynArts`External},
	AxialVector[0][0]->{
FeynArts`Incoming,
FeynArts`Outgoing,
FeynArts`External},
Photon[0]->{
FeynArts`Incoming,
FeynArts`Outgoing,
FeynArts`External}*)};

(* ************************************************************** *)
